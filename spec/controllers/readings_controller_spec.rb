require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ReadingsController, type: :controller do

  thermostat = FactoryGirl.create(:thermostat)
   reading = FactoryGirl.create(:reading, :thermostat_id => thermostat.id)
   it "renders the #index action success" do
    get :index, params: { :household_token => "#{thermostat.household_token}"}
    expect(response).to be_success
    expect(response.content_type).to eq('application/json')
  end

  it "creates a reading for a particular thermostat" do
    post :create, params: {"household_token"=>thermostat.household_token, "temperature"=>"55.4", "humidity"=>"28", "battery_charge"=>"1450"}
    expect(response).to be_success
  end
 
  it "renders a reading for a particular thermostat" do
    get :show, params: {"household_token"=>thermostat.household_token, "id" => reading.id}
    expect(response).to be_success
  end

  it "#show renders in valid token message without household_token" do
    get :show, params: {"id" => reading.id}
    parsed_response = JSON.parse(response.body)
    expect(parsed_response["message"]).to eq("Invalid household token")
  end

  it "#create renders in valid token message without household_token" do
    post :create, params: {"temperature"=>"55.4", "humidity"=>"28", "battery_charge"=>"1450"}
    parsed_response = JSON.parse(response.body)
    expect(parsed_response["message"]).to eq("Invalid household token")
  end

  it "#index renders in valid token message without household_token" do
    get :index
    parsed_response = JSON.parse(response.body)
    expect(parsed_response["message"]).to eq("Invalid household token")
  end

 

end
